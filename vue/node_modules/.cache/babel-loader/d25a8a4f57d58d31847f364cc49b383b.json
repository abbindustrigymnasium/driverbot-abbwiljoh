{"remainingRequest":"C:\\Users\\s9wiljoh\\Desktop\\driverbot-abbwiljoh\\vue\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\s9wiljoh\\Desktop\\driverbot-abbwiljoh\\vue\\node_modules\\eslint-loader\\index.js??ref--13-0!C:\\Users\\s9wiljoh\\Desktop\\driverbot-abbwiljoh\\vue\\src\\store\\store.js","dependencies":[{"path":"C:\\Users\\s9wiljoh\\Desktop\\driverbot-abbwiljoh\\vue\\src\\store\\store.js","mtime":1591017907720},{"path":"C:\\Users\\s9wiljoh\\Desktop\\driverbot-abbwiljoh\\vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\s9wiljoh\\Desktop\\driverbot-abbwiljoh\\vue\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\s9wiljoh\\Desktop\\driverbot-abbwiljoh\\vue\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import Vue from 'vue';\nimport Vuex from 'vuex';\nVue.use(Vuex); // root state object.\n// each Vuex instance is just a single state tree.\n\nvar state = {\n  // Credentials för mqtt som används överallt\n  loadingStatus: \"not loading\",\n  // logger:\"\",\n  logger: [],\n  connect: false,\n  loglimit: 10,\n  user: {\n    name: \"william.johansson@abbindustrigymnasium.se\",\n    password: \"creativetalk\",\n    port: 8883,\n    adress: \"maqiatto.com\"\n  } // mutations are operations that actually mutates the state.\n  // each mutation handler gets the entire state tree as the\n  // first argument, followed by additional payload arguments.\n  // mutations must be synchronous and can be recorded by plugins\n  // for debugging purposes.\n\n};\nvar mutations = {\n  //Jag tror de flesta mutationerna är självföklarande:\n  Loading_Status: function Loading_Status(state, Status) {\n    state.loadingStatus = Status; // Man vill veta loadingstatus \n  },\n  clear_Logger: function clear_Logger(state) {\n    // Funktion för att tömma loggerns meddelandearray\n    // state.logger = \"\";\n    state.logger = [];\n  },\n  Connect_: function Connect_(state, status) {\n    //Förstås för att ansluta till mqtt\n    state.connect = status;\n  },\n  Set_User: function Set_User(state, data) {\n    //Credentials\n    state.user = data;\n  },\n  add_To_Logger: function add_To_Logger(state, text) {\n    //Denna är intressant, man lägger till meddelanden i loggern\n    if (state.loglimit <= state.logger.length) {\n      state.logger.shift();\n    }\n\n    state.logger.push(text); // Används mest för att lägga till MQTT-meddelanden som kan ses i Buttons och Buttonsv2\n    // state.logger += text;\n  },\n  Save_: function Save_(state, user) {\n    state.user = user;\n  } // actions are functions that cause side effects and can involve\n  // asynchronous operations.\n\n};\nvar actions = {\n  //Så att funktionerna kan kallas, i till exempel Buttons.vue \n  LoadingStatus: function LoadingStatus(_ref, Status) {\n    var commit = _ref.commit;\n    commit('Loading_Status', Status);\n  },\n  addToLogger: function addToLogger(_ref2, text) {\n    var commit = _ref2.commit;\n    commit('add_To_Logger', text);\n  },\n  clearLogger: function clearLogger(_ref3) {\n    var commit = _ref3.commit;\n    commit('clear_Logger');\n  },\n  Connect: function Connect(_ref4, status) {\n    var commit = _ref4.commit;\n    commit('Connect_', status);\n  },\n  SetUser: function SetUser(_ref5, data) {\n    var commit = _ref5.commit;\n    commit('Set_User', data);\n  },\n  Save: function Save(_ref6, user) {\n    var commit = _ref6.commit;\n    commit('Save_', user);\n  } // getters are functions\n\n};\nvar getters = {\n  logger: function logger(state) {\n    return state.logger;\n  },\n  connected: function connected(state) {\n    return state.connect;\n  },\n  GetUser: function GetUser(state) {\n    return state.user;\n  } // A Vuex instance is created by combining the state, mutations, actions,\n  // and getters.\n\n};\nexport default new Vuex.Store({\n  //Alla funktioner exporteras för att kunna användas på hela hemsidan.\n  state: state,\n  getters: getters,\n  actions: actions,\n  mutations: mutations\n});",{"version":3,"sources":["C:\\Users\\s9wiljoh\\Desktop\\driverbot-abbwiljoh\\vue\\src\\store\\store.js"],"names":["Vue","Vuex","use","state","loadingStatus","logger","connect","loglimit","user","name","password","port","adress","mutations","Loading_Status","Status","clear_Logger","Connect_","status","Set_User","data","add_To_Logger","text","length","shift","push","Save_","actions","LoadingStatus","commit","addToLogger","clearLogger","Connect","SetUser","Save","getters","connected","GetUser","Store"],"mappings":"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","sourcesContent":["import Vue from 'vue'\r\nimport Vuex from 'vuex'\r\nVue.use(Vuex)\r\n\r\n// root state object.\r\n// each Vuex instance is just a single state tree.\r\nconst state = {                           // Credentials för mqtt som används överallt\r\n  loadingStatus: \"not loading\",\r\n  // logger:\"\",\r\n  logger: [],\r\n  connect: false,\r\n  loglimit: 10,\r\n  user: {\r\n    name: \"william.johansson@abbindustrigymnasium.se\",\r\n    password: \"creativetalk\",\r\n    port: 8883,\r\n    adress: \"maqiatto.com\"\r\n  }\r\n}\r\n\r\n// mutations are operations that actually mutates the state.\r\n// each mutation handler gets the entire state tree as the\r\n// first argument, followed by additional payload arguments.\r\n// mutations must be synchronous and can be recorded by plugins\r\n// for debugging purposes.\r\nconst mutations = {                 //Jag tror de flesta mutationerna är självföklarande:\r\n  Loading_Status(state, Status) {\r\n    state.loadingStatus = Status;   // Man vill veta loadingstatus \r\n  },\r\n  clear_Logger(state) {             // Funktion för att tömma loggerns meddelandearray\r\n    // state.logger = \"\";\r\n    state.logger = [];\r\n  },\r\n  Connect_(state, status) {         //Förstås för att ansluta till mqtt\r\n    state.connect = status;\r\n  },\r\n  Set_User(state, data) {           //Credentials\r\n    state.user = data;\r\n  },\r\n  add_To_Logger(state, text) {                    //Denna är intressant, man lägger till meddelanden i loggern\r\n    if (state.loglimit <= state.logger.length) {    \r\n      state.logger.shift();\r\n    }\r\n    state.logger.push(text);        // Används mest för att lägga till MQTT-meddelanden som kan ses i Buttons och Buttonsv2\r\n    // state.logger += text;\r\n  },\r\n  Save_: (state, user) => {\r\n\r\n    state.user = user;\r\n  },\r\n}\r\n\r\n// actions are functions that cause side effects and can involve\r\n// asynchronous operations.\r\nconst actions = {     //Så att funktionerna kan kallas, i till exempel Buttons.vue \r\n  LoadingStatus: ({\r\n    commit\r\n  }, Status) => {\r\n\r\n    commit('Loading_Status', Status);\r\n  },\r\n  addToLogger: ({\r\n    commit\r\n  }, text) => {\r\n\r\n    commit('add_To_Logger', text);\r\n  },\r\n  clearLogger: ({\r\n    commit\r\n  }) => {\r\n\r\n    commit('clear_Logger');\r\n  },\r\n  Connect: ({\r\n    commit\r\n  }, status) => {\r\n\r\n    commit('Connect_', status);\r\n  },\r\n  SetUser: ({\r\n    commit\r\n  }, data) => {\r\n\r\n    commit('Set_User', data);\r\n  },\r\n\r\n  Save: ({\r\n    commit\r\n  }, user) => {\r\n\r\n    commit('Save_', user);\r\n  },\r\n}\r\n\r\n// getters are functions\r\nconst getters = {\r\n  logger: state => state.logger,\r\n  connected: state => state.connect,\r\n  GetUser: state => state.user,\r\n}\r\n\r\n// A Vuex instance is created by combining the state, mutations, actions,\r\n// and getters.\r\nexport default new Vuex.Store({     //Alla funktioner exporteras för att kunna användas på hela hemsidan.\r\n  state,\r\n  getters,\r\n  actions,\r\n  mutations\r\n})"]}]}